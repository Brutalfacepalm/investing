version: '3.8'

services:
  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_HOST: "postgres"
      POSTGRES_PASSWORD: "investing_db"
      POSTGRES_USER: "investing_db"
      POSTGRES_DB: "investing_db"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "15432:5432"
    restart: always
    networks:
      - postgres
      - flask

  flask:
    build:
      context: ./services/
      dockerfile: ./flask_app/Dockerfile
    container_name: flask
    platform: linux/amd64
    command: gunicorn --bind 0.0.0.0:8000 app:app
#    command: python3 app.py
    volumes:
      - static:/home/app/flask_app/static
      - logs:/home/app/flask_app/logs
#    ports:
#      - 8000:8000
    expose:
      - 8000
    env_file:
      - ./.env.dev
    depends_on:
      - postgres
    networks:
      - flask

  nginx:
    restart: always
    build: ./services/nginx
    container_name: nginx
    volumes:
      - static:/home/app/flask_app/static
#      - ./services/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
      - 1337:80
    depends_on:
      - flask
    networks:
      - flask
      - postgres

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "investing_db@test.com"
      PGADMIN_DEFAULT_PASSWORD: "investing_db"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
#    ports:
#      - 8080:80
    expose:
      - 80
    restart: unless-stopped
    networks:
      - postgres
      - flask
    depends_on:
      - postgres


networks:
  postgres:
    driver: bridge
  flask:
    driver: bridge

volumes:
  static:
  postgres:
  pgadmin:
  logs:

